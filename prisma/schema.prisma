generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Allergen {
    id String @id @default(uuid())

    name     String
    products Product[]
}

model Category {
    id String @id @default(uuid())

    name String
}

model Desk {
    id String @id @default(uuid())

    numberOfSeats Int

    purchases Purchase[]
}

model Image {
    id   String @id @default(uuid())
    name String
    data String

    width   Int
    height  Int
    product Product?
}

model Ingredient {
    id   String @id @default(uuid())
    name String @unique

    products Product[]
}

model Product {
    id          String  @id @default(uuid())
    name        String
    price       Int
    isFood      Boolean
    description String
    image       Image   @relation(fields: [imageId], references: [id])
    imageId     String  @unique

    favorites   Favorite[]
    ingredients Ingredient[]
    allergens   Allergen[]
    cartItems   CartItem[]
}

model Favorite {
    id String @id @default(uuid())

    product Product @relation(fields: [productId], references: [id])
    user    User    @relation(fields: [userId], references: [id])

    productId String
    userId    String

    @@unique([productId, userId])
}

model Purchase {
    id       String @id @default(uuid())
    totalPay Int

    status Status @default(ORDERED)

    deskId String
    userId String

    user User @relation(fields: [userId], references: [id])
    desk Desk @relation(fields: [deskId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Reservation {
    id String @id @default(uuid())

    name           String
    phone          String
    numberOfGuests Int
    comment        String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    checkInDate  DateTime @default(now()) @map("check_in_date")
    checkOutDate DateTime @map("check_out_date")
}

model Cart {
    id     String     @id @default(uuid())
    user   User       @relation(fields: [userId], references: [id])
    userId String     @unique
    items  CartItem[]
}

model CartItem {
    id        String   @id @default(uuid())
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    cart      Cart     @relation(fields: [cartId], references: [id])
    cartId    String
}

model User {
    id       String  @id @default(uuid())
    name     String
    email    String  @unique
    password String
    phone    String?
    darkMode Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    reservations Reservation[]
    purchases    Purchase[]
    favorites    Favorite[]
    cart         Cart?
}

enum Status {
    ORDERED
    COOKED
    SERVED
}
